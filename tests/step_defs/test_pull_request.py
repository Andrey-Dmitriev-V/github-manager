from pytest_bdd import scenario, given, when, then, parsers
from pytest_bdd import scenarios
import requests, base64, pytest

GUTHUB_API = 'https://api.github.com'

# Below 2 auth are not valid anymore and to be updated as per current user
USER = 'andrey-dmitriev'
TOKEN = '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'

HEADERS = {'Authorization': 'token ' + TOKEN}

scenarios('../features/pull_request.feature')

def github_get_sha(repo, branch_mame):
    response = requests.get(GUTHUB_API + '/repos/' + USER + '/' + repo +'/branches')
    assert response.status_code == 200
    for item in response.json():
        if item['name'] == branch_mame:
            sha = item['commit'].get('sha')
    return sha    

def github_delete_repo(repo):
    response = requests.delete(GUTHUB_API + '/repos/' + USER + '/' + repo, headers=HEADERS)
    assert response.status_code == 204

@given("user logs in to GitHub using basic authentication")
def github_response():
    
    # Basic Auth via name and password is deprecated by Github
    # See 
    # https://developer.github.com/changes/2020-02-14-deprecating-password-auth/
    # https://docs.github.com/en/rest/overview/other-authentication-methods#via-username-and-password
    # So isntead of
    # response = requests.get(GUTHUB_API + '/user', auth=HTTPBasicAuth('user', 'password'))
    # we will use token auth.

    response = requests.get(GUTHUB_API + '/user', headers=HEADERS)
    assert response.status_code == 200

@when(parsers.parse('user creates repository with name "{repo}"'))
def github_create_repo_response(repo):
    body = {'name': repo, 'auto_init': True}
    response = requests.post(GUTHUB_API + '/user/repos', headers=HEADERS, json = body)
    assert response.status_code == 201

@when(parsers.parse('user creates branch "{branch}"'))
def github_create_branch(repo, branch):
    sha = github_get_sha(repo,'main')
    body = { 'ref': 'refs/heads/' + branch, 'sha': sha}
    response = requests.post(GUTHUB_API + '/repos/' + USER + '/' + repo +'/git/refs', headers=HEADERS, json = body)
    assert response.status_code == 201

@when(parsers.parse('user commits auto generated file to branch "{branch}"'))
def github_commit_branch(repo,branch):
    sample_string = 'some content'
    sample_string_bytes = sample_string.encode("ascii")
    base64_bytes = base64.b64encode(sample_string_bytes)
    base64_string = base64_bytes.decode("ascii")
    body = { 'message':'committing autogenerated file', 'content': base64_string,'branch':branch}
    response = requests.put(GUTHUB_API + '/repos/' + USER + '/' + repo +'/contents/' + 'path', headers=HEADERS, json = body)
    assert response.status_code == 201

@then('user creates pull request to main branch')
def github_create_pull_request(repo, branch):
    body = { 'title':'New pull request','head': branch, 'base': 'main'}
    response = requests.post(GUTHUB_API + '/repos/' + USER + '/' + repo +'/pulls', headers=HEADERS, json = body)
    assert response.status_code == 201
    github_delete_repo(repo)